package fr.bastoup.BotDanField.dao;

import static fr.bastoup.BotDanField.dao.DAOUtils.closeConn;
import static fr.bastoup.BotDanField.dao.DAOUtils.preparedStatementInit;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import fr.bastoup.BotDanField.beans.Warn;

public class WarnDAOImpl implements WarnDAO {

	private static final String TABLE_NAME = "warns";

	private static final String SQL_INSERT = "INSERT INTO " + TABLE_NAME
			+ " (warned_user, warn_author, warn_reason, warn_date, warn_timeout) VALUES (?, ?, ?, ?, ?)";
	private static final String SQL_SELECT = "SELECT * FROM " + TABLE_NAME + " WHERE id = ?";
	private static final String SQL_DELETE = "DELETE FROM " + TABLE_NAME + " WHERE id = ?";
	private static final String SQL_SELECT_USER = "SELECT * FROM " + TABLE_NAME + " WHERE warned_user = ?";
	private static final String SQL_SELECT_USER_TIMEDOUT = "SELECT * FROM " + TABLE_NAME
			+ " WHERE warn_timeout IS NOT NULL AND warn_date + warn_timeout < ? AND warned_user = ?";
	private static final String SQL_SELECT_USER_NOT_TIMEDOUT = "SELECT * FROM " + TABLE_NAME
			+ " WHERE (warn_timeout IS NULL OR warn_date + warn_timeout > ?) AND warned_user = ?";
	private static final String SQL_SELECT_TIMEDOUT = "SELECT * FROM " + TABLE_NAME
			+ " WHERE warn_timeout IS NOT NULL AND warn_date + warn_timeout < ?";
	private static final String SQL_SELECT_NOT_TIMEDOUT = "SELECT * FROM " + TABLE_NAME
			+ " WHERE warn_timeout IS NULL OR warn_date + warn_timeout > ?";
	private static final String SQL_SELECT_ALL = "SELECT * FROM " + TABLE_NAME;

	private DAOFactory daoFactory;

	public WarnDAOImpl(DAOFactory daoFactory) {
		this.daoFactory = daoFactory;
	}

	@Override
	public void add(Warn warn) throws DAOException {
		Connection connection = null;
		PreparedStatement preparedStatement = null;
		ResultSet autoGeneratedValues = null;

		try {
			connection = daoFactory.getConnection();
			preparedStatement = preparedStatementInit(connection, SQL_INSERT, true, warn.getWarnedUserID(),
					warn.getWarnAuthorID(), warn.getWarnReason(), warn.getWarnDate(), warn.getWarnTimeout());
			int status = preparedStatement.executeUpdate();
			if (status == 0) {
				throw new DAOException("Échec de la création du warn, aucune ligne ajoutée dans la table.");
			}
			autoGeneratedValues = preparedStatement.getGeneratedKeys();
			if (autoGeneratedValues.next()) {
				warn.setId(autoGeneratedValues.getInt(1));
			} else {
				throw new DAOException("Échec de la création du warn, aucun ID auto-généré retourné.");
			}
		} catch (SQLException e) {
			throw new DAOException(e);
		} finally {
			closeConn(autoGeneratedValues, preparedStatement, connection);
		}
	}
	
	@Override
	public void delete(int id) throws DAOException {
		Connection connection = null;
		PreparedStatement preparedStatement = null;

		try {
			connection = daoFactory.getConnection();
			preparedStatement = preparedStatementInit(connection, SQL_DELETE, false, id);
			int status = preparedStatement.executeUpdate();
			if (status == 0) {
				throw new DAOException("Échec de la suppression du warn, aucune ligne supprimée dans la table.");
			}
		} catch (SQLException e) {
			throw new DAOException(e);
		} finally {
			closeConn(preparedStatement, connection);
		}
	}

	@Override
	public Warn get(int id) throws DAOException {
		Connection connection = null;
		PreparedStatement preparedStatement = null;
		ResultSet resultSet = null;
		Warn warn = null;

		try {
			connection = daoFactory.getConnection();
			preparedStatement = preparedStatementInit(connection, SQL_SELECT, false, id);
			resultSet = preparedStatement.executeQuery();
			if (resultSet.next()) {
				warn = map(resultSet);
			}
		} catch (SQLException e) {
			throw new DAOException(e);
		} finally {
			closeConn(resultSet, preparedStatement, connection);
		}

		return warn;
	}

	@Override
	public List<Warn> getAll() throws DAOException {
		Connection connection = null;
		Statement statement = null;
		ResultSet resultSet = null;
		List<Warn> warns = new ArrayList<Warn>();

		try {
			connection = daoFactory.getConnection();
			statement = connection.createStatement();
			resultSet = statement.executeQuery(SQL_SELECT_ALL);
			while (resultSet.next()) {
				Warn warn = new Warn();
				warn.setId(resultSet.getInt("id"));
				warn.setWarnedUserID(resultSet.getString("warned_user"));
				warn.setWarnAuthorID(resultSet.getString("warn_author"));
				warn.setWarnReason(resultSet.getString("warn_reason"));
				warn.setWarnDate(resultSet.getLong("warn_date"));
				warn.setWarnTimeout(resultSet.getLong("warn_timeout"));
				warns.add(warn);
			}
		} catch (SQLException e) {
			throw new DAOException(e);
		} finally {
			closeConn(resultSet, statement, connection);
		}

		return warns;
	}

	@Override
	public List<Warn> getTimedout() throws DAOException {
		Connection connection = null;
		PreparedStatement preparedStatement = null;
		ResultSet resultSet = null;
		List<Warn> warns = new ArrayList<Warn>();

		try {
			connection = daoFactory.getConnection();
			preparedStatement = preparedStatementInit(connection, SQL_SELECT_TIMEDOUT, false, new Date().getTime());
			resultSet = preparedStatement.executeQuery();
			while (resultSet.next()) {
				Warn warn = new Warn();
				warn.setId(resultSet.getInt("id"));
				warn.setWarnedUserID(resultSet.getString("warned_user"));
				warn.setWarnAuthorID(resultSet.getString("warn_author"));
				warn.setWarnReason(resultSet.getString("warn_reason"));
				warn.setWarnDate(resultSet.getLong("warn_date"));
				warn.setWarnTimeout(resultSet.getLong("warn_timeout"));
				warns.add(warn);
			}
		} catch (SQLException e) {
			throw new DAOException(e);
		} finally {
			closeConn(resultSet, preparedStatement, connection);
		}

		return warns;
	}

	@Override
	public List<Warn> getNotTimedout() throws DAOException {
		Connection connection = null;
		PreparedStatement preparedStatement = null;
		ResultSet resultSet = null;
		List<Warn> warns = new ArrayList<Warn>();

		try {
			connection = daoFactory.getConnection();
			preparedStatement = preparedStatementInit(connection, SQL_SELECT_NOT_TIMEDOUT, false, new Date().getTime());
			resultSet = preparedStatement.executeQuery();
			while (resultSet.next()) {
				Warn warn = new Warn();
				warn.setId(resultSet.getInt("id"));
				warn.setWarnedUserID(resultSet.getString("warned_user"));
				warn.setWarnAuthorID(resultSet.getString("warn_author"));
				warn.setWarnReason(resultSet.getString("warn_reason"));
				warn.setWarnDate(resultSet.getLong("warn_date"));
				warn.setWarnTimeout(resultSet.getLong("warn_timeout"));
				warns.add(warn);
			}
		} catch (SQLException e) {
			throw new DAOException(e);
		} finally {
			closeConn(resultSet, preparedStatement, connection);
		}

		return warns;
	}

	private static Warn map(ResultSet resultSet) throws SQLException {
		Warn warn = new Warn();
		warn.setId(resultSet.getInt("id"));
		warn.setWarnedUserID(resultSet.getString("warned_user"));
		warn.setWarnAuthorID(resultSet.getString("warn_author"));
		warn.setWarnReason(resultSet.getString("warn_reason"));
		warn.setWarnDate(resultSet.getLong("warn_date"));
		warn.setWarnTimeout(resultSet.getLong("warn_timeout"));
		return warn;
	}

	@Override
	public List<Warn> getUserWarns(String id) throws DAOException {
		Connection connection = null;
		PreparedStatement preparedStatement = null;
		ResultSet resultSet = null;
		List<Warn> warns = new ArrayList<Warn>();

		try {
			connection = daoFactory.getConnection();
			preparedStatement = preparedStatementInit(connection, SQL_SELECT_USER, false, id);
			resultSet = preparedStatement.executeQuery();
			while (resultSet.next()) {
				Warn warn = new Warn();
				warn.setId(resultSet.getInt("id"));
				warn.setWarnedUserID(resultSet.getString("warned_user"));
				warn.setWarnAuthorID(resultSet.getString("warn_author"));
				warn.setWarnReason(resultSet.getString("warn_reason"));
				warn.setWarnDate(resultSet.getLong("warn_date"));
				warn.setWarnTimeout(resultSet.getLong("warn_timeout"));
				warns.add(warn);
			}
		} catch (SQLException e) {
			throw new DAOException(e);
		} finally {
			closeConn(resultSet, preparedStatement, connection);
		}

		return warns;
	}

	@Override
	public List<Warn> getUserTimedoutWarns(String id) throws DAOException {
		Connection connection = null;
		PreparedStatement preparedStatement = null;
		ResultSet resultSet = null;
		List<Warn> warns = new ArrayList<Warn>();

		try {
			connection = daoFactory.getConnection();
			preparedStatement = preparedStatementInit(connection, SQL_SELECT_USER_TIMEDOUT, false, new Date().getTime(), id);
			resultSet = preparedStatement.executeQuery();
			while (resultSet.next()) {
				Warn warn = new Warn();
				warn.setId(resultSet.getInt("id"));
				warn.setWarnedUserID(resultSet.getString("warned_user"));
				warn.setWarnAuthorID(resultSet.getString("warn_author"));
				warn.setWarnReason(resultSet.getString("warn_reason"));
				warn.setWarnDate(resultSet.getLong("warn_date"));
				warn.setWarnTimeout(resultSet.getLong("warn_timeout"));
				warns.add(warn);
			}
		} catch (SQLException e) {
			throw new DAOException(e);
		} finally {
			closeConn(resultSet, preparedStatement, connection);
		}

		return warns;
	}

	@Override
	public List<Warn> getUserNotTimedoutWarns(String id) throws DAOException {
		Connection connection = null;
		PreparedStatement preparedStatement = null;
		ResultSet resultSet = null;
		List<Warn> warns = new ArrayList<Warn>();

		try {
			connection = daoFactory.getConnection();
			preparedStatement = preparedStatementInit(connection, SQL_SELECT_USER_NOT_TIMEDOUT, false, new Date().getTime(),
					id);
			resultSet = preparedStatement.executeQuery();
			while (resultSet.next()) {
				Warn warn = new Warn();
				warn.setId(resultSet.getInt("id"));
				warn.setWarnedUserID(resultSet.getString("warned_user"));
				warn.setWarnAuthorID(resultSet.getString("warn_author"));
				warn.setWarnReason(resultSet.getString("warn_reason"));
				warn.setWarnDate(resultSet.getLong("warn_date"));
				warn.setWarnTimeout(resultSet.getLong("warn_timeout"));
				warns.add(warn);
			}
		} catch (SQLException e) {
			throw new DAOException(e);
		} finally {
			closeConn(resultSet, preparedStatement, connection);
		}

		return warns;
	}

}
