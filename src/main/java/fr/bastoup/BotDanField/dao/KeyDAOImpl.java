package fr.bastoup.BotDanField.dao;

import static fr.bastoup.BotDanField.dao.DAOUtils.closeConn;
import static fr.bastoup.BotDanField.dao.DAOUtils.preparedStatementInit;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

import fr.bastoup.BotDanField.beans.Key;
import fr.bastoup.BotDanField.utils.KeyType;

public class KeyDAOImpl implements KeyDAO {

	private static final String TABLE_NAME = "keys_info";

	private static final String SQL_INSERT = "INSERT INTO " + TABLE_NAME + " (key_type, user_id, key_timestamp, storage_id) VALUES (?, ?, ?, ?)";
	private static final String SQL_SELECT = "SELECT * FROM " + TABLE_NAME + " WHERE id = ?";
	private static final String SQL_SELECT_USER = "SELECT * FROM " + TABLE_NAME + " WHERE user_id = ?";
	private static final String SQL_SELECT_ALL = "SELECT * FROM " + TABLE_NAME;

	private DAOFactory daoFactory;

	public KeyDAOImpl(DAOFactory daoFactory) {
		this.daoFactory = daoFactory;
	}
	
	@Override
	public Key add(Key key) throws DAOException {
		Connection connection = null;
	    PreparedStatement preparedStatement = null;
	    ResultSet autoGeneratedValues = null;

	    try {
	        connection = daoFactory.getConnection();
	        preparedStatement = preparedStatementInit( connection, SQL_INSERT, true, key.getType().toString(), key.getUserId(), key.getTimestamp(), key.getStorageId() );
	        int status = preparedStatement.executeUpdate();
	        if ( status == 0 ) {
	            throw new DAOException( "Échec de la création de la clé, aucune ligne ajoutée dans la table." );
	        }
	        autoGeneratedValues = preparedStatement.getGeneratedKeys();
			if (autoGeneratedValues.next()) {
				key.setId(autoGeneratedValues.getInt(1));
			} else {
				throw new DAOException("Échec de la création de la clé, aucun ID auto-généré retourné.");
			}
	    } catch ( SQLException e ) {
	        throw new DAOException( e );
	    } finally {
	        closeConn( autoGeneratedValues, preparedStatement, connection );
	    }
	    return key;
	}

	@Override
	public Key get(int id) throws DAOException {
		Connection connection = null;
		PreparedStatement preparedStatement = null;
		ResultSet resultSet = null;
		Key key = null;

		try {
			connection = daoFactory.getConnection();
			preparedStatement = preparedStatementInit(connection, SQL_SELECT, false, id);
			resultSet = preparedStatement.executeQuery();
			if (resultSet.next()) {
				key = map(resultSet);
			}
		} catch (SQLException e) {
			throw new DAOException(e);
		} finally {
			closeConn(resultSet, preparedStatement, connection);
		}

		return key;
	}

	@Override
	public List<Key> getAll() throws DAOException {
		Connection connection = null;
		PreparedStatement preparedStatement = null;
		ResultSet resultSet = null;
		List<Key> keys = new ArrayList<Key>();

		try {
			connection = daoFactory.getConnection();
			preparedStatement = preparedStatementInit(connection, SQL_SELECT_ALL, false);
			resultSet = preparedStatement.executeQuery();
			while(resultSet.next()) {
				keys.add(map(resultSet));
			}
		} catch (SQLException e) {
			throw new DAOException(e);
		} finally {
			closeConn(resultSet, preparedStatement, connection);
		}

		return keys;
	}

	@Override
	public List<Key> getUserKeys(String userId) throws DAOException {
		Connection connection = null;
		PreparedStatement preparedStatement = null;
		ResultSet resultSet = null;
		List<Key> keys = new ArrayList<Key>();

		try {
			connection = daoFactory.getConnection();
			preparedStatement = preparedStatementInit(connection, SQL_SELECT_USER, false, userId);
			resultSet = preparedStatement.executeQuery();
			while(resultSet.next()) {
				keys.add(map(resultSet));
			}
		} catch (SQLException e) {
			throw new DAOException(e);
		} finally {
			closeConn(resultSet, preparedStatement, connection);
		}

		return keys;
	}

	private static Key map(ResultSet resultSet) throws SQLException {
		Key key = new Key();
		key.setId(resultSet.getInt("id"));
		key.setType(KeyType.valueOf(resultSet.getString("key_type")));
		key.setUserId(resultSet.getString("user_id"));
		key.setStorageId(resultSet.getInt("storage_id"));
		key.setTimestamp(resultSet.getLong("key_timestamp"));
		return key;
	}

}
