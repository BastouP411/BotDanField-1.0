package fr.bastoup.BotDanField.dao;

import static fr.bastoup.BotDanField.dao.DAOUtils.closeConn;
import static fr.bastoup.BotDanField.dao.DAOUtils.preparedStatementInit;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import fr.bastoup.BotDanField.beans.CustomCommand;

public class CustomCommandDAOImpl implements CustomCommandDAO {

	private static final String TABLE_NAME = "commands";

	private static final String SQL_INSERT = "INSERT INTO " + TABLE_NAME + " (command, effect, roles, action) VALUES (?, ?, ?, ?)";
	private static final String SQL_UPDATE_ROLE = "UPDATE " + TABLE_NAME + " SET roles=? WHERE id=?";
	private static final String SQL_SELECT = "SELECT * FROM " + TABLE_NAME + " WHERE command = ?";
	private static final String SQL_SELECT_ID = "SELECT * FROM " + TABLE_NAME + " WHERE id = ?";
	private static final String SQL_DELETE = "DELETE FROM " + TABLE_NAME + " WHERE id = ?";
	private static final String SQL_SELECT_ALL = "SELECT * FROM " + TABLE_NAME;

	private DAOFactory daoFactory;

	public CustomCommandDAOImpl(DAOFactory daoFactory) {
		this.daoFactory = daoFactory;
	}
	
	@Override
	public CustomCommand add(CustomCommand cmd) throws DAOException {
		Connection connection = null;
	    PreparedStatement preparedStatement = null;
	    ResultSet autoGeneratedValues = null;

	    try {
	        connection = daoFactory.getConnection();
	        preparedStatement = preparedStatementInit( connection, SQL_INSERT, true, cmd.getCommand(), cmd.getEffect(), (cmd.getRoles().isEmpty() ? null : String.join(";", cmd.getRoles())), cmd.getAction() );
	        int status = preparedStatement.executeUpdate();
	        if ( status == 0 ) {
	            throw new DAOException( "Échec de la création de la clé, aucune ligne ajoutée dans la table." );
	        }
	        autoGeneratedValues = preparedStatement.getGeneratedKeys();
			if (autoGeneratedValues.next()) {
				cmd.setId(autoGeneratedValues.getInt(1));
			} else {
				throw new DAOException("Échec de la création de la clé, aucun ID auto-généré retourné.");
			}
	    } catch ( SQLException e ) {
	        throw new DAOException( e );
	    } finally {
	        closeConn( autoGeneratedValues, preparedStatement, connection );
	    }
	    return cmd;
	}

	@Override
	public void updateRoles(CustomCommand cmd) throws DAOException {
		Connection connection = null;
		PreparedStatement preparedStatement = null;

		try {
			connection = daoFactory.getConnection();
			preparedStatement = preparedStatementInit(connection, SQL_UPDATE_ROLE, false, (cmd.getRoles().isEmpty() ? null : String.join(";", cmd.getRoles())), cmd.getId());
			int status = preparedStatement.executeUpdate();
			if (status == 0) {
				throw new DAOException("Échec de la mise à jour de la clé, aucune ligne modifiée dans la table.");
			}
		} catch (SQLException e) {
			throw new DAOException(e);
		} finally {
			closeConn(preparedStatement, connection);
		}
	}

	@Override
	public CustomCommand getById(int id) throws DAOException {
		Connection connection = null;
		PreparedStatement preparedStatement = null;
		ResultSet resultSet = null;
		CustomCommand cmd = null;

		try {
			connection = daoFactory.getConnection();
			preparedStatement = preparedStatementInit(connection, SQL_SELECT_ID, false, id);
			resultSet = preparedStatement.executeQuery();
			if (resultSet.next()) {
				cmd = map(resultSet);
			}
		} catch (SQLException e) {
			throw new DAOException(e);
		} finally {
			closeConn(resultSet, preparedStatement, connection);
		}

		return cmd;
	}
	
	@Override
	public CustomCommand get(String command) throws DAOException {
		Connection connection = null;
		PreparedStatement preparedStatement = null;
		ResultSet resultSet = null;
		CustomCommand cmd = null;

		try {
			connection = daoFactory.getConnection();
			preparedStatement = preparedStatementInit(connection, SQL_SELECT, false, command);
			resultSet = preparedStatement.executeQuery();
			if (resultSet.next()) {
				cmd = map(resultSet);
			}
		} catch (SQLException e) {
			throw new DAOException(e);
		} finally {
			closeConn(resultSet, preparedStatement, connection);
		}

		return cmd;
	}

	@Override
	public List<CustomCommand> getAll() throws DAOException {
		Connection connection = null;
		PreparedStatement preparedStatement = null;
		ResultSet resultSet = null;
		List<CustomCommand> cmds = new ArrayList<CustomCommand>();

		try {
			connection = daoFactory.getConnection();
			preparedStatement = preparedStatementInit(connection, SQL_SELECT_ALL, false);
			resultSet = preparedStatement.executeQuery();
			while(resultSet.next()) {
				cmds.add(map(resultSet));
			}
		} catch (SQLException e) {
			throw new DAOException(e);
		} finally {
			closeConn(resultSet, preparedStatement, connection);
		}

		return cmds;
	}

	@Override
	public void delete(int id) throws DAOException {
		Connection connection = null;
		PreparedStatement preparedStatement = null;

		try {
			connection = daoFactory.getConnection();
			preparedStatement = preparedStatementInit(connection, SQL_DELETE, false, id);
			int status = preparedStatement.executeUpdate();
			if (status == 0) {
				throw new DAOException("Échec de la suppression de la clé, aucune ligne supprimée dans la table.");
			}
		} catch (SQLException e) {
			throw new DAOException(e);
		} finally {
			closeConn(preparedStatement, connection);
		}
	}
	
	private static CustomCommand map(ResultSet resultSet) throws SQLException {
		CustomCommand cmd = new CustomCommand();
		cmd.setId(resultSet.getInt("id"));
		cmd.setCommand(resultSet.getString("command"));
		cmd.setEffect(resultSet.getString("effect"));
		cmd.setAction(resultSet.getString("action"));
		cmd.setRoles(resultSet.getString("roles") == null || resultSet.getString("roles").trim().equalsIgnoreCase("") ? new ArrayList<String>() : new ArrayList<String>(Arrays.asList(resultSet.getString("roles").split(";"))));
		return cmd;
	}

}
