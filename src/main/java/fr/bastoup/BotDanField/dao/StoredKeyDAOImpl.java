package fr.bastoup.BotDanField.dao;

import static fr.bastoup.BotDanField.dao.DAOUtils.*;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

import fr.bastoup.BotDanField.beans.StoredKey;

public class StoredKeyDAOImpl implements StoredKeyDAO {

	private static final String TABLE_NAME = "keys_storage";

	private static final String SQL_INSERT = "INSERT INTO " + TABLE_NAME + " (key_str, usage_id, key_timestamp) VALUES (?, ?, ?)";
	private static final String SQL_UPDATE = "UPDATE " + TABLE_NAME + " SET usage_id=? WHERE id=?";
	private static final String SQL_SELECT = "SELECT * FROM " + TABLE_NAME + " WHERE id = ?";
	private static final String SQL_SELECT_NAME = "SELECT * FROM " + TABLE_NAME + " WHERE key_str = ?";
	private static final String SQL_DELETE = "DELETE FROM " + TABLE_NAME + " WHERE id = ?";
	private static final String SQL_SELECT_USAGE = "SELECT * FROM " + TABLE_NAME + " WHERE usage_id = ?";
	private static final String SQL_SELECT_NOT_USED = "SELECT * FROM " + TABLE_NAME + " WHERE usage_id IS NULL";
	private static final String SQL_SELECT_ALL = "SELECT * FROM " + TABLE_NAME;

	private DAOFactory daoFactory;

	public StoredKeyDAOImpl(DAOFactory daoFactory) {
		this.daoFactory = daoFactory;
	}
	
	@Override
	public StoredKey add(StoredKey key) throws DAOException {
		Connection connection = null;
	    PreparedStatement preparedStatement = null;
	    ResultSet autoGeneratedValues = null;

	    try {
	        connection = daoFactory.getConnection();
	        preparedStatement = preparedStatementInit( connection, SQL_INSERT, true, key.getKey(), key.getUsageId(), key.getTimestamp() );
	        int status = preparedStatement.executeUpdate();
	        if ( status == 0 ) {
	            throw new DAOException( "Échec de la création de la clé, aucune ligne ajoutée dans la table." );
	        }
	        autoGeneratedValues = preparedStatement.getGeneratedKeys();
			if (autoGeneratedValues.next()) {
				key.setId(autoGeneratedValues.getInt(1));
			} else {
				throw new DAOException("Échec de la création de la clé, aucun ID auto-généré retourné.");
			}
	    } catch ( SQLException e ) {
	        throw new DAOException( e );
	    } finally {
	        closeConn( autoGeneratedValues, preparedStatement, connection );
	    }
	    return key;
	}

	@Override
	public void updateUsed(StoredKey key) throws DAOException {
		Connection connection = null;
		PreparedStatement preparedStatement = null;

		try {
			connection = daoFactory.getConnection();
			preparedStatement = preparedStatementInit(connection, SQL_UPDATE, false, key.getUsageId(), key.getId());
			int status = preparedStatement.executeUpdate();
			if (status == 0) {
				throw new DAOException("Échec de la mise à jour de la clé, aucune ligne modifiée dans la table.");
			}
		} catch (SQLException e) {
			throw new DAOException(e);
		} finally {
			closeConn(preparedStatement, connection);
		}
	}

	@Override
	public StoredKey get(int id) throws DAOException {
		Connection connection = null;
		PreparedStatement preparedStatement = null;
		ResultSet resultSet = null;
		StoredKey key = null;

		try {
			connection = daoFactory.getConnection();
			preparedStatement = preparedStatementInit(connection, SQL_SELECT, false, id);
			resultSet = preparedStatement.executeQuery();
			if (resultSet.next()) {
				key = map(resultSet);
			}
		} catch (SQLException e) {
			throw new DAOException(e);
		} finally {
			closeConn(resultSet, preparedStatement, connection);
		}

		return key;
	}

	@Override
	public List<StoredKey> getAll() throws DAOException {
		Connection connection = null;
		PreparedStatement preparedStatement = null;
		ResultSet resultSet = null;
		List<StoredKey> keys = new ArrayList<StoredKey>();

		try {
			connection = daoFactory.getConnection();
			preparedStatement = preparedStatementInit(connection, SQL_SELECT_ALL, false);
			resultSet = preparedStatement.executeQuery();
			while(resultSet.next()) {
				keys.add(map(resultSet));
			}
		} catch (SQLException e) {
			throw new DAOException(e);
		} finally {
			closeConn(resultSet, preparedStatement, connection);
		}

		return keys;
	}

	@Override
	public List<StoredKey> getNotUsed() throws DAOException {
		Connection connection = null;
		PreparedStatement preparedStatement = null;
		ResultSet resultSet = null;
		List<StoredKey> keys = new ArrayList<StoredKey>();

		try {
			connection = daoFactory.getConnection();
			preparedStatement = preparedStatementInit(connection, SQL_SELECT_NOT_USED, false);
			resultSet = preparedStatement.executeQuery();
			while(resultSet.next()) {
				keys.add(map(resultSet));
			}
		} catch (SQLException e) {
			throw new DAOException(e);
		} finally {
			closeConn(resultSet, preparedStatement, connection);
		}

		return keys;
	}

	@Override
	public List<StoredKey> getUsageKeys(int usageId) throws DAOException {
		Connection connection = null;
		PreparedStatement preparedStatement = null;
		ResultSet resultSet = null;
		List<StoredKey> keys = new ArrayList<StoredKey>();

		try {
			connection = daoFactory.getConnection();
			preparedStatement = preparedStatementInit(connection, SQL_SELECT_USAGE, false, usageId);
			resultSet = preparedStatement.executeQuery();
			while(resultSet.next()) {
				keys.add(map(resultSet));
			}
		} catch (SQLException e) {
			throw new DAOException(e);
		} finally {
			closeConn(resultSet, preparedStatement, connection);
		}

		return keys;
	}

	@Override
	public void delete(int id) throws DAOException {
		Connection connection = null;
		PreparedStatement preparedStatement = null;

		try {
			connection = daoFactory.getConnection();
			preparedStatement = preparedStatementInit(connection, SQL_DELETE, false, id);
			int status = preparedStatement.executeUpdate();
			if (status == 0) {
				throw new DAOException("Échec de la suppression de la clé, aucune ligne supprimée dans la table.");
			}
		} catch (SQLException e) {
			throw new DAOException(e);
		} finally {
			closeConn(preparedStatement, connection);
		}
	}

	private static StoredKey map(ResultSet resultSet) throws SQLException {
		StoredKey key = new StoredKey();
		key.setId(resultSet.getInt("id"));
		key.setUsageId(resultSet.getInt("usage_id"));
		key.setKey(resultSet.getString("key_str"));
		key.setTimestamp(resultSet.getLong("key_timestamp"));
		return key;
	}

	@Override
	public StoredKey getKey(String keyName) throws DAOException {
		Connection connection = null;
		PreparedStatement preparedStatement = null;
		ResultSet resultSet = null;
		StoredKey key = null;

		try {
			connection = daoFactory.getConnection();
			preparedStatement = preparedStatementInit(connection, SQL_SELECT_NAME, false, keyName);
			resultSet = preparedStatement.executeQuery();
			if (resultSet.next()) {
				key = map(resultSet);
			}
		} catch (SQLException e) {
			throw new DAOException(e);
		} finally {
			closeConn(resultSet, preparedStatement, connection);
		}

		return key;
	}

}
